# -*- coding: utf-8 -*-
"""cifar10_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Ubg-WBMSxV3jYqEPxvXCc_xUhzG_hKt
"""

#!/usr/bin/env python3

#without data agumentation and using two conv layers wirh maxpooling and two dense layers got 70.29% accuracy

import keras
from keras.datasets import cifar10,mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout,Flatten, Conv2D, MaxPooling2D
from keras.optimizers import RMSprop,Adadelta,SGD
import matplotlib.pyplot as plt
from keras import backend as K
from keras.optimizers import RMSprop
from keras.preprocessing.image import ImageDataGenerator
import numpy as np

# The data, split between train and test sets:
(train_x, train_y), (test_x, test_y) = cifar10.load_data()

print('x_train shape:', train_x.shape)
print(train_x.shape[0], 'train samples')
print(test_x.shape[0], 'test samples')

batch_size = 100
output_classes = 10
epochs = 50
data_augmentation = True

#shuffling data
X = np.random.shuffle(train)

x_train = train_x
x_test = test_x
x_train.shape
#x_test.shape

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

y_train = train_y
#y_train.shape
y_test = test_y
y_test.shape

y_train.shape

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, output_classes)
y_test = keras.utils.to_categorical(y_test, output_classes)

y_train.shape

#before scaling
img_index = 12
x = x_train[img_index,]
plt.imshow(x,cmap = "gray")

#after scaling
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

img_index = 12
x = x_train[img_index,]
plt.imshow(x)

input_shape = x_train[1].shape
input_shape

#model
model = Sequential()

model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(32,kernel_size=(3,3),activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(output_classes, activation='softmax'))

model.compile(loss = 'categorical_crossentropy',optimizer = RMSprop(),metrics = ['accuracy'])

if not data_augmentation:
  print('not using data augmentation.')
  model.fit(x_trian,y_train,batch_size = batch_size,epochs = epochs,
           validation_data = (x_test,y_test))
  
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=True,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=True,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False) # randomly flip images
    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)
# Fit the model on the batches generated by datagen.flow().
    #flow = datagen.flow(x_train,y_train,batch_size = batch_size)

import time
from keras import callbacks
from keras.utils import np_utils

t0 = time.time()
model.fit_generator(datagen.flow(x_train,y_train,batch_size = batch_size),steps_per_epoch = 5000, epochs=epochs,
                        validation_data=(x_test, y_test),verbose = 1,workers = 1)
t1 = time.time()
print('total time',str(t1-t0),'seconds')

score = model.evaluate(x_test, y_test, verbose=0)

print('Test loss:', score[0])
print('Test accuracy:', score[1])

model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test, verbose=0)

print('Test loss:', score[0])
print('Test accuracy:', score[1])

model.fit_generator()